"use client";
import { createContext, useContext, useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import api from "@/utils/api";

const AuthContext = createContext();

// ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // üìå –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    try {
      const storedToken = localStorage.getItem("token");
      const storedUser = localStorage.getItem("currentUser");

      console.log("Stored Token: ", storedToken); // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
      console.log("Stored User: ", storedUser);   // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

      if (storedToken && storedUser) {
        try {
          const parsedUser = JSON.parse(storedUser);
          console.log("Parsed User: ", parsedUser); // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

          if (parsedUser) {
            setToken(storedToken);
            setUser(parsedUser);
            setIsLoggedIn(true);
          } else {
            console.error("Parsed user is null or invalid.");
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:", error);
      localStorage.removeItem("currentUser"); // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }

    setLoading(false);

    // üü° –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ localStorage (–Ω–∞ —Å–ª—É—á–∞–π –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –¥—Ä—É–≥–æ–≥–æ –æ–∫–Ω–∞)
    const handleStorageChange = () => {
      const updatedToken = localStorage.getItem("token");
      const updatedUser = localStorage.getItem("currentUser");

      console.log("Updated Token: ", updatedToken); // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      console.log("Updated User: ", updatedUser);   // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

      if (updatedToken && updatedUser) {
        try {
          const parsedUser = JSON.parse(updatedUser);
          console.log("Parsed Updated User: ", parsedUser); // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

          if (parsedUser) {
            setToken(updatedToken);
            setUser(parsedUser);
            setIsLoggedIn(true);
          } else {
            console.error("Parsed updated user is null or invalid.");
            setIsLoggedIn(false); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
          }
        } catch {
          console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage");
          localStorage.removeItem("currentUser");
          setIsLoggedIn(false);
        }
      } else {
        setToken(null);
        setUser(null);
        setIsLoggedIn(false);
      }
    };

    window.addEventListener("storage", handleStorageChange);
    return () => window.removeEventListener("storage", handleStorageChange);
  }, []);

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è login:
const login = (token, user) => {
  if (!token || !user || typeof user !== "object") {
    console.error("Invalid login data", token, user);
    return;
  }

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  localStorage.setItem("token", token);
  localStorage.setItem("currentUser", JSON.stringify(user));

  console.log("User saved to localStorage:", token, user);
  setToken(token);
  setUser(user);
  setIsLoggedIn(true);
  router.push("/profile");
};


  // ‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("currentUser");
    setToken(null);
    setUser(null);
    setIsLoggedIn(false);
    router.push("/login"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  };

  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
  const fetchProfile = async () => {
    try {
      const response = await api.get("/profile");
      setUser(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
      logout(); // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        isLoggedIn,
        login,
        logout,
        fetchProfile,
      }}
    >
      {!loading && children}
    </AuthContext.Provider>
  );
};

// ‚úÖ –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
