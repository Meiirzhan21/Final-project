// main.go
package main

import (
	"booking-system/auth"
	"booking-system/db"
	"booking-system/handlers"
	"booking-system/middleware"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
)

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
var users = map[string]string{}
var roles = map[string]string{}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
func init() {
	adminPassword, _ := auth.HashPassword("admin123")
	users["admin"] = adminPassword
	roles["admin"] = "admin"
}

func main() {
	// === üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB ===
	if err := db.ConnectMongoDB(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: %v", err)
	}
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB")

	// ‚úÖ –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
	router := mux.NewRouter()

	// ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º CORS Middleware
	corsRouter := middleware.CORSMiddleware(router)

	// ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º Rate Limiting
	limiter := middleware.NewRateLimiter(5, time.Minute)

	// === üìÇ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ===
	// === üìÇ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ===
	router.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π!"))
	}).Methods("GET")

	// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –õ–û–ì–ò–ù ‚Äî –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–£–ë–õ–ò–ß–ù–´–ú–ò (–ë–µ–∑ /protected/)
	router.Handle("/register", limiter.Middleware(http.HandlerFunc(handlers.RegisterHandler))).Methods("POST")
	router.Handle("/login", limiter.Middleware(http.HandlerFunc(handlers.LoginHandler))).Methods("POST") // ‚úÖ –ü–£–ë–õ–ò–ß–ù–û!
	// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º {id}, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ObjectID
	router.Handle("/protected/bookings/{_id}", middleware.AuthMiddleware(
		http.HandlerFunc(handlers.DeleteBookingHandler),
	)).Methods("DELETE")

	// ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–µ–ª–µ–π
	router.HandleFunc("/hotels", handlers.GetHotelsHandler).Methods("GET")
	router.HandleFunc("/users", handlers.GetUsersHandler).Methods("GET")
	router.Handle("/hotels/upload", http.HandlerFunc(handlers.AddHotelsHandler)).Methods("POST")
	// –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–µ–ª—è –ø–æ ID
	router.HandleFunc("/hotels/{id}", handlers.GetHotelByIDHandler).Methods("GET")

	// === üìÇ –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ===
	protected := router.PathPrefix("/protected").Subrouter()
	protected.Use(middleware.AuthMiddleware)
	// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–µ–ª—å –ø–æ ID
	protected.HandleFunc("/hotels/{id}", handlers.GetHotelByIDHandler).Methods("GET")

	protected.Handle("/profile", http.HandlerFunc(handlers.ProfileHandler)).Methods("GET")

	protected.Handle("/bookings", http.HandlerFunc(handlers.BookingsHandler)).Methods("GET")
	protected.Handle("/bookings/add", http.HandlerFunc(handlers.AddBookingHandler)).Methods("POST")

	// ‚úÖ –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç–µ–ª–µ–π
	protected.Handle("/hotels", http.HandlerFunc(handlers.GetHotelsHandler)).Methods("GET")
	protected.Handle("/hotels/upload", http.HandlerFunc(handlers.AddHotelsHandler)).Methods("POST")
	protected.Handle("/hotels/clear", http.HandlerFunc(handlers.ClearHotelsHandler)).Methods("DELETE")

	// === üìÇ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
	protected.HandleFunc("/dashboard", func(w http.ResponseWriter, r *http.Request) {
		username, _ := r.Context().Value(middleware.UsernameKey).(string)
		role, _ := r.Context().Value(middleware.RoleKey).(string)

		if role != "admin" {
			http.Error(w, "–û—à–∏–±–∫–∞: –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", http.StatusForbidden)
			return
		}
		w.Write([]byte("–ü—Ä–∏–≤–µ—Ç, " + username + "! –≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."))
	}).Methods("GET")

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
	protected.HandleFunc("/booking", func(w http.ResponseWriter, r *http.Request) {
		username, _ := r.Context().Value(middleware.UsernameKey).(string)
		w.Write([]byte("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + username + "! –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."))
	}).Methods("GET")

	// === üèÅ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
	log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :8080")
	log.Fatal(http.ListenAndServe(":8080", corsRouter))
}
